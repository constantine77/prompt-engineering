from pyspark.sql import SparkSession
from pyspark.sql.types import StructType
import json

# Initialize Spark Session
spark = SparkSession.builder.appName("DeltaSchemaMerge").getOrCreate()

# Function to convert JSON string to StructType
def json_to_struct(json_str):
    return StructType.fromJson(json.loads(json_str))

# Mock Avro schemas as JSON strings for each scenario
original_schema_str = '{"type":"record","name":"BaseRecord","fields":[{"name":"id","type":"int"},{"name":"field1","type":"string","default":"default_value"}]}'
name_change_schema_str = '{"type":"record","name":"NameChangeRecord","fields":[{"name":"id","type":"int"},{"name":"field2","type":"string","default":"default_value"}]}'
type_change_schema_str = '{"type":"record","name":"TypeChangeRecord","fields":[{"name":"id","type":"string"},{"name":"field1","type":"string","default":"default_value"}]}'
default_value_change_schema_str = '{"type":"record","name":"DefaultValueChangeRecord","fields":[{"name":"id","type":"int"},{"name":"field1","type":"string","default":"new_default_value"}]}'

# Convert JSON schemas to Spark DataFrame schemas
original_schema = json_to_struct(original_schema_str)
name_change_schema = json_to_struct(name_change_schema_str)
type_change_schema = json_to_struct(type_change_schema_str)
default_value_change_schema = json_to_struct(default_value_change_schema_str)

# Base DataFrame matching the original schema
df_base = spark.createDataFrame([], schema=original_schema)

# Define the Delta table path
delta_path = "dbfs:/mnt/delta/base_table"

# Write the base DataFrame to Delta
df_base.write.format("delta").mode("overwrite").save(delta_path)

# Function to try merging schema with the Delta table
def try_merge_schema(delta_path, modified_schema, scenario):
    df_modified = spark.createDataFrame([], schema=modified_schema)
    
    try:
        # Attempt to merge schema with existing Delta table
        df_modified.write.format("delta").mode("append").option("mergeSchema", "true").save(delta_path)
        print(f"{scenario}: Schema merge successful, no breaking change detected.")
    except Exception as e:
        print(f"{scenario}: Schema merge failed, breaking change detected. Error: {str(e)}")

# Attempt to merge schemas for each scenario
try_merge_schema(delta_path, name_change_schema, "Field Name Change")
try_merge_schema(delta_path, type_change_schema, "Field Data Type Change")
try_merge_schema(delta_path, default_value_change_schema, "Field Default Value Change")
